{"version":3,"file":"main.js","mappings":"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","sources":["webpack://yandex_praktikum/./src/components/modal.js","webpack://yandex_praktikum/./src/components/api.js","webpack://yandex_praktikum/./src/components/card.js","webpack://yandex_praktikum/./src/components/validation.js","webpack://yandex_praktikum/./src/components/utils.js","webpack://yandex_praktikum/./src/components/index.js"],"sourcesContent":["import { clearValidation } from './validation';\n\n//открытие попап\nexport const openModal = (popupElement) => {\n    popupElement.classList.add('popup_is-opened');\n    document.addEventListener('keydown', closeByEsc);\n};\n\n//закрытие попап\nexport const closeModal = (popupElement) => {\n    popupElement.classList.remove('popup_is-opened');\n    document.removeEventListener('keydown', closeByEsc);\n};\n\n//закрытие by esc\nconst closeByEsc = (evt) => {\n    const openedPopup = document.querySelector('.popup_is-opened');\n    if (evt.key === 'Escape') {\n        closeModal(openedPopup);\n    };\n};\n\n//закрытие by overlay\nexport const closeOverlay = (popup) => {\n    popup.addEventListener('click', (evt) => {\n        if (evt.target.classList.contains('popup_is-opened')) {\n            closeModal(popup);\n        }\n    });\n};\n\n\n\n\n","\n//объект для авторизации\nconst config = {\n    baseUrl: 'https://nomoreparties.co/v1/wff-cohort-20',\n    headers: {\n        authorization: '2b46e9fc-1e2f-4c30-b303-a3bd469f0607',\n        'Content-Type': 'application/json'\n    }\n};\n\n//обработка ответа\nconst handleResponse = (res) => {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n};\n\n//получение информации о пользователе с сервера\nexport const getUserRequest = () => {\n    return fetch(`${config.baseUrl}/users/me`, {\n        method: 'GET',\n        headers: config.headers\n    })\n    .then(handleResponse)\n};\n\n//загрузка карточек с сервера\nexport const getCardsRequest = () => {\n    return fetch(`${config.baseUrl}/cards`, {\n        method: 'GET',\n        headers: config.headers\n    })\n    .then(handleResponse)\n};\n\n//редактирование профиля\nexport const patchProfileRequest = (profileTitle, profileDescription) => {\n    return fetch(`${config.baseUrl}/users/me`, {\n        method: 'PATCH',\n        headers: config.headers,\n        body: JSON.stringify({\n        name: profileTitle,\n        about: profileDescription\n        })\n    })\n    .then(handleResponse);\n};\n\n//добавление новой карточки\nexport const postAddCardRequest = (placeInput, linkInput) => {\n    return fetch(`${config.baseUrl}/cards`, {\n        method: 'POST',\n        headers: config.headers,\n        body: JSON.stringify({\n        // name: placeInput.value,\n        // link: linkInput.value\n        name: placeInput,\n        link: linkInput\n        })\n    })\n    .then(handleResponse);\n};\n\n//постановка и снятие лайка\nexport const putLikeRequest = (item) => {\n    return fetch(`${config.baseUrl}/cards/likes/${item._id}`, {\n        method: 'PUT',\n        headers: config.headers\n    })\n    .then(handleResponse)\n};\n\nexport const deleteLikeRequest = (item) => {\n    return fetch(`${config.baseUrl}/cards/likes/${item._id}`, {\n        method: 'DELETE',\n        headers: config.headers\n    })\n    .then(handleResponse)\n};\n\n//удаление карточки\nexport const deleteCardRequest = (cardId) => {\n    return fetch(`${config.baseUrl}/cards/${cardId}`, {\n        method: 'DELETE',\n        headers: config.headers,\n    })\n    .then(handleResponse)\n};\n\n//обновление аватара\nexport const patchAvatarRequest = (link) => {\n    return fetch(`${config.baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: config.headers,\n      body: JSON.stringify({\n        avatar: link})\n    })\n    .then(handleResponse)\n  }\n\n//проверка url на изображение\nexport const headCheckUrl = (url) => {\n    return fetch(url, {\n        method: 'HEAD',\n    })\n    .then((url) => {\n        if (url.ok) {\n            if(url.headers.get('Content-type').includes('image')) {\n            return Promise.resolve();\n        }\n        return Promise.reject('url не является изображением');\n        }\n        return Promise.reject('url не существует');\n    });\n}","import { putLikeRequest, deleteLikeRequest } from \"./api\";\n\n// @todo: Темплейт карточки \nconst cardTemplate = document.querySelector('#card-template').content; \n\n//клонирование шаблона карточки\nconst getCardTemplate = () => {\n    return cardTemplate.querySelector('.card').cloneNode(true);\n};\n\n//функция создания карточки \nexport function createCard(item, openImg, deleteCard, putDeleteLikes, userId) {\n    //клонирование шаблона карточки\n    const cardItem = getCardTemplate();\n\n    //получение элементов карточки\n    const deleteButton = cardItem.querySelector('.card__delete-button'); \n    const newCard = cardItem.querySelector('.card__image');\n    const likeButton = cardItem.querySelector('.card__like-button');\n    const likeCount = cardItem.querySelector(\".card__like-count\");\n    const cardTitle = cardItem.querySelector(\".card__title\");\n    //присвоение значений\n    cardTitle.textContent = item.name; \n    newCard.src = item.link; \n    newCard.alt = item.name; \n    likeCount.textContent = item.likes.length;\n\n    //проверка наличия моего лайка\n    if(item.likes.some((like) => like._id === userId)) {\n        likeButton.classList.add(\"card__like-button_is-active\");\n    } else {\n        likeButton.classList.remove(\"card__like-button_is-active\");\n    }\n\n    //настройка удаления своей карточки\n    if(item.owner._id === userId) {\n        cardItem.dataset.myCardForDelete = item._id;\n        deleteButton.addEventListener('click', () => deleteCard(item._id, cardItem));\n        } else {\n            deleteButton.remove();\n        }\n        \n        //обработчик открытия карточки\n        newCard.addEventListener('click', () => openImg(item));\n        \n        //обработчик постановки и снятия лайков\n        likeButton.addEventListener('click', () => putDeleteLikes(item, likeButton, likeCount, userId));\n        return cardItem;\n    };\n\n// Функция постановки и снятия лайков\nexport function putDeleteLikes(item, likeButton, likeCount, userId) {\n    //Проверка наличия моего лайка\n    if (item.likes.some((like) => like._id === userId)) {\n        //удаление только моего лайка\n        deleteLikeRequest(item)\n        //обновление количества лайков\n        .then((newItem) => {\n            likeCount.textContent = newItem.likes.length;\n            likeButton.classList.remove(\"card__like-button_is-active\");\n            item.likes = newItem.likes;\n        })\n        .catch((error) => console.log(error));\n    } else {\n        //добавление лайка (если не стоит)\n        putLikeRequest(item)\n        //обновление количества лайков\n        .then((newItem) => {\n          likeCount.textContent = newItem.likes.length;\n          likeButton.classList.add(\"card__like-button_is-active\");\n          item.likes = newItem.likes;\n        })\n        .catch((error) => console.log(error));\n    }\n}","//отображение сообщения об ошибке \nexport const showInputError = (formElement, inputElement, errorMessage, validationConfig) => {\n    const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\n    inputElement.classList.add(validationConfig.inputErrorClass);\n    errorElement.textContent = errorMessage;\n    errorElement.classList.add(validationConfig.errorClass);\n};\n\n//скрытие сообщения об ошибке если ввод валиден \nexport const hideInputError = (formElement, inputElement, validationConfig) => {\n    const errorElement = formElement.querySelector(`.${inputElement.id}-error`);\n    inputElement.classList.remove(validationConfig.inputErrorClass);\n    inputElement.setCustomValidity('');\n    errorElement.classList.remove(validationConfig.errorClass);\n    errorElement.textContent = '';\n\n};\n\n//проверка валидности полей\nconst isValid = (formElement, inputElement, validationConfig) => {\n    if (inputElement.validity.patternMismatch) {\n        inputElement.setCustomValidity(inputElement.dataset.errorMessage);\n    } else {\n        inputElement.setCustomValidity('');\n    }\n    if (!inputElement.validity.valid) {\n        showInputError(formElement, inputElement, inputElement.validationMessage, validationConfig);\n    } else {\n        hideInputError(formElement, inputElement, validationConfig);\n    }\n}; \n\nconst hasInvalidInput = (inputList) => {\n    return inputList.some((input) => {\n        return !input.validity.valid;\n    })\n}; \n\n//неактивная кнопка если значения невалидны  \nexport const toggleButtonState = (inputList, buttonElement, validationConfig) => {\n    if (hasInvalidInput(inputList)) {\n        buttonElement.disabled = true;\n        buttonElement.classList.add(validationConfig.inactiveButtonClass);\n    } else {\n        buttonElement.disabled = false;\n        buttonElement.classList.remove(validationConfig.inactiveButtonClass);\n    }\n};\n\n//слушатель для каждого input\nconst setEventListeners = (formElement, validationConfig) => {\n    const inputList = Array.from(formElement.querySelectorAll(validationConfig.inputSelector));\n    const buttonElement = formElement.querySelector(validationConfig.submitButtonSelector);\n    toggleButtonState(inputList, buttonElement, validationConfig);\n    inputList.forEach((inputElement) => {\n        inputElement.addEventListener('input', function () {\n            isValid(formElement, inputElement, validationConfig);\n            toggleButtonState(inputList, buttonElement, validationConfig);\n        });\n    });\n};\n\n//активация валидации\nexport const enableValidation = (validationConfig) => {\n    const formList = Array.from(document.querySelectorAll(validationConfig.formSelector));\n    formList.forEach((formElement) => {\n        formElement.addEventListener('submit', function (evt) {\n        evt.preventDefault();\n    });\n    setEventListeners(formElement, validationConfig);\n});\n};\n\n//очистка ошибок валидации\nexport const clearValidation = (formElement, validationConfig) => {\n    const inputList = Array.from(formElement.querySelectorAll(validationConfig.inputSelector));\n    const buttonElement = formElement.querySelector(validationConfig.submitButtonSelector);\n    inputList.forEach((inputElement) => {\n        hideInputError(formElement, inputElement, validationConfig);\n    });\n    toggleButtonState(inputList, buttonElement, validationConfig);\n};\n\n","//рендеринг\nexport function renderLoading(isLoading, buttonElement) {\n    if (isLoading) {\n        buttonElement.textContent = 'Сохранение...';\n    } else {\n        buttonElement.textContent = 'Сохранить';\n    }\n};","import '../pages/index.css'; \nimport { openModal, closeModal, closeOverlay } from './modal';\nimport { createCard, putDeleteLikes } from './card';\nimport { enableValidation, clearValidation, showInputError, toggleButtonState } from './validation';\nimport { getUserRequest, getCardsRequest, patchProfileRequest, postAddCardRequest, headCheckUrl, deleteCardRequest, patchAvatarRequest } from './api';\nimport { renderLoading } from './utils';\n\n// @todo: DOM узлы \nconst placesList = document.querySelector('.places__list'); \n\n// переменные для попапа\nconst popupImg = document.querySelector('.popup_type_image');\nconst imgCard = popupImg.querySelector('.popup__image');\nconst imgCaption = popupImg.querySelector('.popup__caption');\nconst closeButtonPopup = document.querySelectorAll('.popup__close');\nconst submitButton = document.querySelectorAll('.popup__button');//уточнить в случае необходимости\n\n//переменные для формы редатирования имени и информации\nconst popupEdit = document.querySelector('.popup_type_edit');\nconst formEditProfile = popupEdit.querySelector('.popup__form');\nconst buttonFormSubmit = formEditProfile.querySelector('.popup__button');\nconst nameInput = formEditProfile.querySelector('.popup__input_type_name');\nconst jobInput = formEditProfile.querySelector('.popup__input_type_description');\nconst profileTitle = document.querySelector('.profile__title');\nconst profileDescription = document.querySelector('.profile__description');\nconst profileImage = document.querySelector('.profile__image');\nconst openButtonPopupAdd = document.querySelector('.profile__add-button');\nconst openButtonPopupEdit = document.querySelector('.profile__edit-button');\n\n//переменные для изменения аватара\nconst popupEditAvatar = document.querySelector('.popup_type_edit-avatar');\nconst formAvatar = popupEditAvatar.querySelector('.popup__form');\nconst buttonSubmitAvatar = formAvatar.querySelector('.popup__button');\nconst inputAvatarForm = formAvatar.querySelector('.popup__input_type_url');\nconst avatarContainer = document.querySelector('.avatar-container');\n\n//переменные для добавления картинки\nconst popupAdd = document.querySelector('.popup_type_new-card');\nconst formForImage = popupAdd.querySelector('.popup__form');\nconst placeInput = formForImage.querySelector('.popup__input_type_card-name');\nconst linkInput = formForImage.querySelector('.popup__input_type_url');\nconst buttonSubmitPopupAdd = popupAdd.querySelector('.popup__button');\n\n//переменные для удаления карточки\nconst popupDeleteCard = document.querySelector('.popup_type_delete-card');\nconst formForDeleteCard = popupDeleteCard.querySelector('.popup__form');\n\n//объект для валидации\nconst validationConfig = {\n    formSelector: \".popup__form\",\n    inputSelector: \".popup__input\",\n    submitButtonSelector: \".popup__button\",\n    inactiveButtonClass: \"popup__button_disabled\",\n    inputErrorClass: \"popup__input_type_error\",\n    errorClass: \"popup__error_visible\"\n};\n\n//мой пользователь\nexport let userId;\n\n//вызов валидации формы\nenableValidation(validationConfig);\n\n//редактирование имени и информации о себе\nfunction editAccount(evt) {\n    evt.preventDefault(); \n    renderLoading(true, buttonFormSubmit);\n    patchProfileRequest(nameInput.value, jobInput.value)\n    .then(() => {\n        profileTitle.textContent = nameInput.value;\n        profileDescription.textContent = jobInput.value;\n        closeModal(popupEdit);\n    })\n    .catch((error) => {\n        console.log(`Ошибка при загрузке данных: ${error}`);\n    })\n    .finally(() => {\n        renderLoading(false, buttonFormSubmit);\n    })\n};\n\n//обработчик редактирования учетки \nopenButtonPopupEdit.addEventListener('click', () => {\n    nameInput.value = profileTitle.textContent;\n    jobInput.value = profileDescription.textContent;\n    openModal(popupEdit);//открыть модальное окно\n    clearValidation(formEditProfile, validationConfig);//очистить ошибки валидации при успешной загрузке\n});\n\n//слушатель формы редактирования учетки\nformEditProfile.addEventListener('submit', editAccount);\n\n// редактирование аватара\n    function editAvatar(evt) {\n        evt.preventDefault();\n        console.log(\"Функция editAvatar вызвана\");\n        headCheckUrl(inputAvatarForm.value)\n        .then(() => {\n            console.log(\"URL проверен\");\n            renderLoading(true, buttonSubmitAvatar);\n            const avatarValue = inputAvatarForm.value;\n            patchAvatarRequest(avatarValue)\n            .then((avatarData) => {\n                console.log(\"Блок .then вызван\", avatarData);\n                profileImage.style.backgroundImage = `url(${avatarData.avatar})`;\n                closeModal(popupEditAvatar);\n          })\n        .catch((error) => {\n            console.log(`Ошибка при загрузке данных: ${error}`);\n          })\n          .finally(() => {\n            renderLoading(false, buttonSubmitAvatar);\n          })\n        .catch((error) => {\n            showInputError(formAvatar, inputAvatarForm, error, validationConfig);\n            toggleButtonState(inputAvatarForm, buttonSubmitAvatar, validationConfig);\n        });\n    }\n    )};\n\n//открыть попап редактирования аватара\navatarContainer.addEventListener('click', () => {\n    formAvatar.reset();\n    openModal(popupEditAvatar);\n    clearValidation(formAvatar, validationConfig) // Очистить ошибки валидации \n});\n\n//слушатель редактирования аватара\nformAvatar.addEventListener('submit', editAvatar);\n\n//добавление новой картинки\nexport function addNewCard(evt) {\n    evt.preventDefault();\n    renderLoading(true, buttonSubmitPopupAdd);\n    postAddCardRequest(placeInput.value, linkInput.value)\n      .then((item) => {\n        placesList.prepend(createCard(item, openImg, deleteCard, putDeleteLikes, userId));\n        formForImage.reset();\n        clearValidation(formForImage, validationConfig); // очистить ошибки валидации при успешном сабмите\n        closeModal(popupAdd);//закрыть форму\n      })\n    .catch((error) => {\n        console.log(`Ошибка при загрузке данных: ${error}`);\n      })\n      .finally(() => {\n        renderLoading(false, buttonSubmitPopupAdd);\n      })\n  };\n\n//обработчик открытия попапа добавления карточки\nopenButtonPopupAdd.addEventListener('click', () => {\n    formForImage.reset();\n    openModal(popupAdd);\n});\n\n//слушатель добавления карточки\nformForImage.addEventListener('submit', addNewCard);\n\n//открыть попап картинку\nfunction openImg(item) {\n    imgCard.src = item.link;\n    imgCard.alt = item.name;\n    imgCaption.textContent = item.name;\n    openModal(popupImg);\n};\n\n//открыть попап удаления карточки\nexport let myCardForDelete = {};\nconst deleteCard = (cardId, cardItem) => {\n    myCardForDelete = {\n        id: cardId, cardItem\n    }\n    openModal(popupDeleteCard);\n};\n\n//функция удаления карточки\nconst handleDeleteCardSubmit = (evt) => {\n    evt.preventDefault();\n    deleteCardRequest(myCardForDelete.id)\n    .then(() => {\n        myCardForDelete.cardItem.remove();\n        closeModal(popupDeleteCard);\n        myCardForDelete = {};\n    })\n    .catch((error) => {\n        console.log(`Error deleting card: ${error}`);\n    })\n}\n\n//слушатель на попап удаления карточки\nformForDeleteCard.addEventListener('submit', (evt) => {\n    handleDeleteCardSubmit(evt);\n});\n\n//загрузка данных пользователя и карточек\nPromise.all([getUserRequest(), getCardsRequest()])\n// Обработка извлеченных данных\n.then(([userData, cardsData]) => {\n    profileTitle.textContent = userData.name;\n    profileDescription.textContent = userData.about;\n    profileImage.src = userData.avatar;\n    userId = userData._id;\n    // Вывод карточек на страницу \n    cardsData.forEach(function(item) {\n        placesList.append(createCard(item, openImg, deleteCard, putDeleteLikes, userId)); \n    }); \n})\n// Обработка ошибки\n.catch((error) => {\n    console.log(`Ошибка при загрузке данных: ${error}`);\n});\n\n//закрыть форму by x\ncloseButtonPopup.forEach((button) => {\n    button.addEventListener('click', (evt) => {\n        const popup = evt.target.closest('.popup');\n        closeModal(popup);\n    });\n});\n\n//закрыть по клику на оверлей\nconst popups = [popupEdit, popupAdd, popupImg, popupEditAvatar, popupDeleteCard];\npopups.forEach(popup => closeOverlay(popup));"],"names":["openModal","popupElement","classList","add","document","addEventListener","closeByEsc","closeModal","remove","removeEventListener","evt","openedPopup","querySelector","key","config","baseUrl","headers","authorization","handleResponse","res","ok","json","Promise","reject","concat","status","cardTemplate","content","createCard","item","openImg","deleteCard","putDeleteLikes","userId","cardItem","cloneNode","deleteButton","newCard","likeButton","likeCount","textContent","name","src","link","alt","likes","length","some","like","_id","owner","dataset","myCardForDelete","fetch","method","then","deleteLikeRequest","newItem","catch","error","console","log","putLikeRequest","showInputError","formElement","inputElement","errorMessage","validationConfig","errorElement","id","inputErrorClass","errorClass","hideInputError","setCustomValidity","toggleButtonState","inputList","buttonElement","input","validity","valid","hasInvalidInput","disabled","inactiveButtonClass","clearValidation","Array","from","querySelectorAll","inputSelector","submitButtonSelector","forEach","renderLoading","isLoading","placesList","popupImg","imgCard","imgCaption","closeButtonPopup","popupEdit","formEditProfile","buttonFormSubmit","nameInput","jobInput","profileTitle","profileDescription","profileImage","openButtonPopupAdd","openButtonPopupEdit","popupEditAvatar","formAvatar","buttonSubmitAvatar","inputAvatarForm","avatarContainer","popupAdd","formForImage","placeInput","linkInput","buttonSubmitPopupAdd","popupDeleteCard","formForDeleteCard","formSelector","preventDefault","patternMismatch","validationMessage","isValid","setEventListeners","enableValidation","value","body","JSON","stringify","about","patchProfileRequest","finally","reset","url","get","includes","resolve","avatar","avatarData","style","backgroundImage","postAddCardRequest","prepend","cardId","handleDeleteCardSubmit","all","_ref","_ref2","userData","cardsData","append","button","popup","target","closest","contains","closeOverlay"],"sourceRoot":""}